{"ast":null,"code":"import compareVersions from'compare-versions';import{CodedError}from'@unimodules/react-native-adapter';var postedWarnings={};export default function deprecate(library,deprecatedAPI){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var currentVersion=options.currentVersion,versionToRemove=options.versionToRemove,replacement=options.replacement;var code=codeFromLibrary(library);var key=code+\":\"+deprecatedAPI+\":\"+replacement;if(!postedWarnings[key]){postedWarnings[key]=true;}if(!currentVersion||!versionToRemove||compareVersions(currentVersion,versionToRemove)>=0){var _message=\"`\"+deprecatedAPI+\"` has been removed\";if(versionToRemove){_message=_message+\" as of version \\\"\"+versionToRemove+\"\\\"\";}if(replacement&&replacement.length){_message=_message+\" please migrate to: `\"+replacement+\"`\";}throw new CodedError(\"ERR_DEPRECATED_API\",prependLibrary(library,_message));}var message=\"`\"+deprecatedAPI+\"` has been deprecated\";if(replacement&&replacement.length){message=message+\" in favor of `\"+replacement+\"`\";}if(versionToRemove&&versionToRemove.length){message=message+\" and will be removed in version \\\"\"+versionToRemove+\"\\\"\";}console.warn(prependLibrary(library,message));}function prependLibrary(library,message){return library+\": \"+message;}function codeFromLibrary(library){var code=library.replace(/[-.]/g,'_').toUpperCase();return code;}","map":{"version":3,"sources":["/home/rick/dev/cool-home/node_modules/@unimodules/core/build/deprecate.js"],"names":["compareVersions","CodedError","postedWarnings","deprecate","library","deprecatedAPI","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","message","length","prependLibrary","console","warn","replace","toUpperCase"],"mappings":"AAAA,MAAOA,CAAAA,eAAP,KAA4B,kBAA5B,CACA,OAASC,UAAT,KAA2B,kCAA3B,CACA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CAIA,cAAe,SAASC,CAAAA,SAAT,CAAmBC,OAAnB,CAA4BC,aAA5B,CAAyD,IAAdC,CAAAA,OAAc,2DAAJ,EAAI,IAC5DC,CAAAA,cAD4D,CACXD,OADW,CAC5DC,cAD4D,CAC5CC,eAD4C,CACXF,OADW,CAC5CE,eAD4C,CAC3BC,WAD2B,CACXH,OADW,CAC3BG,WAD2B,CAEpE,GAAMC,CAAAA,IAAI,CAAGC,eAAe,CAACP,OAAD,CAA5B,CACA,GAAMQ,CAAAA,GAAG,CAAMF,IAAN,KAAcL,aAAd,KAA+BI,WAAxC,CACA,GAAI,CAACP,cAAc,CAACU,GAAD,CAAnB,CAA0B,CACtBV,cAAc,CAACU,GAAD,CAAd,CAAsB,IAAtB,CACH,CACD,GAAI,CAACL,cAAD,EACA,CAACC,eADD,EAEAR,eAAe,CAACO,cAAD,CAAiBC,eAAjB,CAAf,EAAoD,CAFxD,CAE2D,CACvD,GAAIK,CAAAA,QAAO,KAAQR,aAAR,qBAAX,CACA,GAAIG,eAAJ,CAAqB,CACjBK,QAAO,CAAMA,QAAN,qBAAgCL,eAAhC,KAAP,CACH,CACD,GAAIC,WAAW,EAAIA,WAAW,CAACK,MAA/B,CAAuC,CACnCD,QAAO,CAAMA,QAAN,yBAAsCJ,WAAtC,IAAP,CACH,CACD,KAAM,IAAIR,CAAAA,UAAJ,sBAAqCc,cAAc,CAACX,OAAD,CAAUS,QAAV,CAAnD,CAAN,CACH,CACD,GAAIA,CAAAA,OAAO,KAAQR,aAAR,wBAAX,CACA,GAAII,WAAW,EAAIA,WAAW,CAACK,MAA/B,CAAuC,CACnCD,OAAO,CAAMA,OAAN,kBAA+BJ,WAA/B,IAAP,CACH,CACD,GAAID,eAAe,EAAIA,eAAe,CAACM,MAAvC,CAA+C,CAC3CD,OAAO,CAAMA,OAAN,sCAAiDL,eAAjD,KAAP,CACH,CACDQ,OAAO,CAACC,IAAR,CAAaF,cAAc,CAACX,OAAD,CAAUS,OAAV,CAA3B,EACH,CACD,QAASE,CAAAA,cAAT,CAAwBX,OAAxB,CAAiCS,OAAjC,CAA0C,CACtC,MAAUT,CAAAA,OAAV,MAAsBS,OAAtB,CACH,CAMD,QAASF,CAAAA,eAAT,CAAyBP,OAAzB,CAAkC,CAC9B,GAAMM,CAAAA,IAAI,CAAGN,OAAO,CAACc,OAAR,CAAgB,OAAhB,CAAyB,GAAzB,EAA8BC,WAA9B,EAAb,CACA,MAAOT,CAAAA,IAAP,CACH","sourcesContent":["import compareVersions from 'compare-versions';\nimport { CodedError } from '@unimodules/react-native-adapter';\nconst postedWarnings = {};\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(library, deprecatedAPI, options = {}) {\n    const { currentVersion, versionToRemove, replacement } = options;\n    const code = codeFromLibrary(library);\n    const key = `${code}:${deprecatedAPI}:${replacement}`;\n    if (!postedWarnings[key]) {\n        postedWarnings[key] = true;\n    }\n    if (!currentVersion ||\n        !versionToRemove ||\n        compareVersions(currentVersion, versionToRemove) >= 0) {\n        let message = `\\`${deprecatedAPI}\\` has been removed`;\n        if (versionToRemove) {\n            message = `${message} as of version \"${versionToRemove}\"`;\n        }\n        if (replacement && replacement.length) {\n            message = `${message} please migrate to: \\`${replacement}\\``;\n        }\n        throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n    }\n    let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n    if (replacement && replacement.length) {\n        message = `${message} in favor of \\`${replacement}\\``;\n    }\n    if (versionToRemove && versionToRemove.length) {\n        message = `${message} and will be removed in version \"${versionToRemove}\"`;\n    }\n    console.warn(prependLibrary(library, message));\n}\nfunction prependLibrary(library, message) {\n    return `${library}: ${message}`;\n}\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library) {\n    const code = library.replace(/[-.]/g, '_').toUpperCase();\n    return code;\n}\n//# sourceMappingURL=deprecate.js.map"]},"metadata":{},"sourceType":"module"}