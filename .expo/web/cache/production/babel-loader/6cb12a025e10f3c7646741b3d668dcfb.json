{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{pipe}from\"ramda\";var getValues=function getValues(){var input=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref$minimum=_ref.minimum,minimum=_ref$minimum===void 0?0:_ref$minimum,_ref$maximum=_ref.maximum,maximum=_ref$maximum===void 0?1:_ref$maximum;return[input,maximum-minimum,minimum];};var getPercentage=function getPercentage(_ref2){var _ref3=_slicedToArray(_ref2,3),input=_ref3[0],range=_ref3[1],min=_ref3[2];return(input-min)/range;};var getValue=function getValue(_ref4){var _ref5=_slicedToArray(_ref4,3),input=_ref5[0],range=_ref5[1],min=_ref5[2];return input*range+min;};export var valueToPercentage=pipe(getValues,getPercentage);export var percentageToValue=pipe(getValues,getValue);","map":{"version":3,"sources":["/home/rick/dev/cool-home/src/utils/percentages.ts"],"names":["pipe","getValues","input","minimum","maximum","getPercentage","range","min","getValue","valueToPercentage","percentageToValue"],"mappings":"iEACA,OAASA,IAAT,KAAqB,OAArB,CAIA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAChBC,CAAAA,KADgB,2DACA,CADA,oEAEiD,EAFjD,mBAEdC,OAFc,CAEdA,OAFc,uBAEJ,CAFI,gCAEDC,OAFC,CAEDA,OAFC,uBAES,CAFT,oBAGb,CAACF,KAAD,CAAQE,OAAO,CAAGD,OAAlB,CAA2BA,OAA3B,CAHa,EAAlB,CAKA,GAAME,CAAAA,aAAqB,CAAG,QAAxBA,CAAAA,aAAwB,0CAAEH,KAAF,UAASI,KAAT,UAAgBC,GAAhB,gBAAyB,CAACL,KAAK,CAAGK,GAAT,EAAgBD,KAAzC,EAA9B,CACA,GAAME,CAAAA,QAAgB,CAAG,QAAnBA,CAAAA,QAAmB,0CAAEN,KAAF,UAASI,KAAT,UAAgBC,GAAhB,gBAAyBL,CAAAA,KAAK,CAAGI,KAAR,CAAgBC,GAAzC,EAAzB,CAEA,MAAO,IAAME,CAAAA,iBAAiB,CAAGT,IAAI,CACnCC,SADmC,CAEnCI,aAFmC,CAA9B,CAKP,MAAO,IAAMK,CAAAA,iBAAiB,CAAGV,IAAI,CACnCC,SADmC,CAEnCO,QAFmC,CAA9B","sourcesContent":["import { ThingPropertyNormalized } from \"../store/things/interfaces\";\nimport { pipe } from \"ramda\";\n\ntype utilFn = (ops: number[]) => number;\n\nconst getValues = (\n  input: number = 0,\n  { minimum = 0, maximum = 1 }: Partial<ThingPropertyNormalized> = {}\n) => [input, maximum - minimum, minimum];\n\nconst getPercentage: utilFn = ([input, range, min]) => (input - min) / range;\nconst getValue: utilFn = ([input, range, min]) => input * range + min;\n\nexport const valueToPercentage = pipe(\n  getValues,\n  getPercentage\n);\n\nexport const percentageToValue = pipe(\n  getValues,\n  getValue\n);\n"]},"metadata":{},"sourceType":"module"}