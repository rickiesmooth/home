{"ast":null,"code":"import URL from'url-parse';export function getFilename(url){var _ref=new URL(url,{}),pathname=_ref.pathname;return pathname.substring(pathname.lastIndexOf('/')+1);}export function getFileExtension(url){var filename=getFilename(url);var dotIndex=filename.lastIndexOf('.');return dotIndex>0?filename.substring(dotIndex):'';}export function getManifestBaseUrl(manifestUrl){var urlObject=new URL(manifestUrl,{});if(urlObject.protocol==='exp:'){urlObject.set('protocol','http:');}else if(urlObject.protocol==='exps:'){urlObject.set('protocol','https:');}var directory=urlObject.pathname.substring(0,urlObject.pathname.lastIndexOf('/')+1);urlObject.set('pathname',directory);urlObject.set('query','');urlObject.set('hash','');return urlObject.href;}","map":{"version":3,"sources":["/home/rick/dev/cool-home/node_modules/expo-asset/build/AssetUris.js"],"names":["URL","getFilename","url","pathname","substring","lastIndexOf","getFileExtension","filename","dotIndex","getManifestBaseUrl","manifestUrl","urlObject","protocol","set","directory","href"],"mappings":"AAAA,MAAOA,CAAAA,GAAP,KAAgB,WAAhB,CACA,MAAO,SAASC,CAAAA,WAAT,CAAqBC,GAArB,CAA0B,UACR,GAAIF,CAAAA,GAAJ,CAAQE,GAAR,CAAa,EAAb,CADQ,CACrBC,QADqB,MACrBA,QADqB,CAE7B,MAAOA,CAAAA,QAAQ,CAACC,SAAT,CAAmBD,QAAQ,CAACE,WAAT,CAAqB,GAArB,EAA4B,CAA/C,CAAP,CACH,CACD,MAAO,SAASC,CAAAA,gBAAT,CAA0BJ,GAA1B,CAA+B,CAClC,GAAMK,CAAAA,QAAQ,CAAGN,WAAW,CAACC,GAAD,CAA5B,CACA,GAAMM,CAAAA,QAAQ,CAAGD,QAAQ,CAACF,WAAT,CAAqB,GAArB,CAAjB,CAEA,MAAOG,CAAAA,QAAQ,CAAG,CAAX,CAAeD,QAAQ,CAACH,SAAT,CAAmBI,QAAnB,CAAf,CAA8C,EAArD,CACH,CAYD,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,WAA5B,CAAyC,CAC5C,GAAMC,CAAAA,SAAS,CAAG,GAAIX,CAAAA,GAAJ,CAAQU,WAAR,CAAqB,EAArB,CAAlB,CAEA,GAAIC,SAAS,CAACC,QAAV,GAAuB,MAA3B,CAAmC,CAC/BD,SAAS,CAACE,GAAV,CAAc,UAAd,CAA0B,OAA1B,EACH,CAFD,IAGK,IAAIF,SAAS,CAACC,QAAV,GAAuB,OAA3B,CAAoC,CACrCD,SAAS,CAACE,GAAV,CAAc,UAAd,CAA0B,QAA1B,EACH,CAED,GAAMC,CAAAA,SAAS,CAAGH,SAAS,CAACR,QAAV,CAAmBC,SAAnB,CAA6B,CAA7B,CAAgCO,SAAS,CAACR,QAAV,CAAmBE,WAAnB,CAA+B,GAA/B,EAAsC,CAAtE,CAAlB,CACAM,SAAS,CAACE,GAAV,CAAc,UAAd,CAA0BC,SAA1B,EACAH,SAAS,CAACE,GAAV,CAAc,OAAd,CAAuB,EAAvB,EACAF,SAAS,CAACE,GAAV,CAAc,MAAd,CAAsB,EAAtB,EACA,MAAOF,CAAAA,SAAS,CAACI,IAAjB,CACH","sourcesContent":["import URL from 'url-parse';\nexport function getFilename(url) {\n    const { pathname } = new URL(url, {});\n    return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\nexport function getFileExtension(url) {\n    const filename = getFilename(url);\n    const dotIndex = filename.lastIndexOf('.');\n    // Ignore leading dots for hidden files\n    return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://expo.io/@user/project/index.exp, the\n * base URL would be https://expo.io/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\nexport function getManifestBaseUrl(manifestUrl) {\n    const urlObject = new URL(manifestUrl, {});\n    // Change the scheme to http(s) if it is exp(s)\n    if (urlObject.protocol === 'exp:') {\n        urlObject.set('protocol', 'http:');\n    }\n    else if (urlObject.protocol === 'exps:') {\n        urlObject.set('protocol', 'https:');\n    }\n    // Trim filename, query parameters, and fragment, if any\n    const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n    urlObject.set('pathname', directory);\n    urlObject.set('query', '');\n    urlObject.set('hash', '');\n    return urlObject.href;\n}\n//# sourceMappingURL=AssetUris.js.map"]},"metadata":{},"sourceType":"module"}