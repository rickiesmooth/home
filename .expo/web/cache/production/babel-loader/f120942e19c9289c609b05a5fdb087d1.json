{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{Asset}from'expo-asset';import Constants from'expo-constants';import{Platform}from'@unimodules/core';import ExpoFontLoader from\"./ExpoFontLoader\";var isWeb=Platform.OS==='web';var isInClient=!isWeb&&Constants.appOwnership==='expo';var isInIOSStandalone=Constants.appOwnership==='standalone'&&Platform.OS==='ios';var loaded={};var loadPromises={};function fontFamilyNeedsScoping(name){return(isInClient||isInIOSStandalone)&&!Constants.systemFonts.includes(name)&&name!=='System'&&!name.includes(Constants.sessionId);}export function processFontFamily(name){if(!name||!fontFamilyNeedsScoping(name)){return name;}if(!isLoaded(name)){if(__DEV__){if(isLoading(name)){console.error(\"You started loading the font \\\"\"+name+\"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");}else{console.error(\"fontFamily \\\"\"+name+\"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");}}return'System';}return\"ExpoFont-\"+_getNativeFontName(name);}export function isLoaded(name){return loaded.hasOwnProperty(name);}export function isLoading(name){return loadPromises.hasOwnProperty(name);}export function loadAsync(nameOrMap,source){var fontMap,names,name,asset;return _regeneratorRuntime.async(function loadAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(typeof nameOrMap==='object')){_context2.next=6;break;}fontMap=nameOrMap;names=Object.keys(fontMap);_context2.next=5;return _regeneratorRuntime.awrap(Promise.all(names.map(function(name){return loadAsync(name,fontMap[name]);})));case 5:return _context2.abrupt(\"return\");case 6:name=nameOrMap;if(!loaded[name]){_context2.next=9;break;}return _context2.abrupt(\"return\");case 9:if(!loadPromises[name]){_context2.next=11;break;}return _context2.abrupt(\"return\",loadPromises[name]);case 11:if(source){_context2.next=13;break;}throw new Error(\"No source from which to load font \\\"\"+name+\"\\\"\");case 13:asset=_getAssetForSource(source);loadPromises[name]=function _callee(){return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return _regeneratorRuntime.awrap(_loadSingleFontAsync(name,asset));case 3:loaded[name]=true;case 4:_context.prev=4;delete loadPromises[name];return _context.finish(4);case 7:case\"end\":return _context.stop();}}},null,null,[[0,,4,7]]);}();_context2.next=17;return _regeneratorRuntime.awrap(loadPromises[name]);case 17:case\"end\":return _context2.stop();}}});}function _getAssetForSource(source){if(source instanceof Asset){return source;}if(!isWeb&&typeof source==='string'){return Asset.fromURI(source);}if(isWeb||typeof source==='number'){return Asset.fromModule(source);}return source;}function _loadSingleFontAsync(name,asset){return _regeneratorRuntime.async(function _loadSingleFontAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _regeneratorRuntime.awrap(asset.downloadAsync());case 2:if(asset.downloaded){_context3.next=4;break;}throw new Error(\"Failed to download asset for font \\\"\"+name+\"\\\"\");case 4:_context3.next=6;return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(_getNativeFontName(name),asset.localUri));case 6:case\"end\":return _context3.stop();}}});}function _getNativeFontName(name){if(fontFamilyNeedsScoping(name)){return Constants.sessionId+\"-\"+name;}else{return name;}}if(module&&module.exports){var wasImportWarningShown=false;Object.defineProperty(exports,'Font',{get:function get(){if(!wasImportWarningShown){console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");wasImportWarningShown=true;}return{processFontFamily:processFontFamily,isLoaded:isLoaded,isLoading:isLoading,loadAsync:loadAsync};}});}","map":{"version":3,"sources":["/home/rick/dev/cool-home/node_modules/expo-font/build/Font.js"],"names":["Asset","Constants","Platform","ExpoFontLoader","isWeb","OS","isInClient","appOwnership","isInIOSStandalone","loaded","loadPromises","fontFamilyNeedsScoping","name","systemFonts","includes","sessionId","processFontFamily","isLoaded","__DEV__","isLoading","console","error","_getNativeFontName","hasOwnProperty","loadAsync","nameOrMap","source","fontMap","names","Object","keys","Promise","all","map","Error","asset","_getAssetForSource","_loadSingleFontAsync","fromURI","fromModule","downloadAsync","downloaded","localUri","module","exports","wasImportWarningShown","defineProperty","get","warn"],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\nimport ExpoFontLoader from './ExpoFontLoader';\nconst isWeb = Platform.OS === 'web';\nconst isInClient = !isWeb && Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\nconst loaded = {};\nconst loadPromises = {};\nfunction fontFamilyNeedsScoping(name) {\n    return ((isInClient || isInIOSStandalone) &&\n        !Constants.systemFonts.includes(name) &&\n        name !== 'System' &&\n        !name.includes(Constants.sessionId));\n}\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\nexport function processFontFamily(name) {\n    if (!name || !fontFamilyNeedsScoping(name)) {\n        return name;\n    }\n    if (!isLoaded(name)) {\n        if (__DEV__) {\n            if (isLoading(name)) {\n                console.error(`You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`);\n            }\n            else {\n                console.error(`fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`);\n            }\n        }\n        return 'System';\n    }\n    return `ExpoFont-${_getNativeFontName(name)}`;\n}\nexport function isLoaded(name) {\n    return loaded.hasOwnProperty(name);\n}\nexport function isLoading(name) {\n    return loadPromises.hasOwnProperty(name);\n}\nexport async function loadAsync(nameOrMap, source) {\n    if (typeof nameOrMap === 'object') {\n        const fontMap = nameOrMap;\n        const names = Object.keys(fontMap);\n        await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n        return;\n    }\n    const name = nameOrMap;\n    if (loaded[name]) {\n        return;\n    }\n    if (loadPromises[name]) {\n        return loadPromises[name];\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    if (!source) {\n        throw new Error(`No source from which to load font \"${name}\"`);\n    }\n    const asset = _getAssetForSource(source);\n    loadPromises[name] = (async () => {\n        try {\n            await _loadSingleFontAsync(name, asset);\n            loaded[name] = true;\n        }\n        finally {\n            delete loadPromises[name];\n        }\n    })();\n    await loadPromises[name];\n}\nfunction _getAssetForSource(source) {\n    if (source instanceof Asset) {\n        return source;\n    }\n    if (!isWeb && typeof source === 'string') {\n        return Asset.fromURI(source);\n    }\n    if (isWeb || typeof source === 'number') {\n        return Asset.fromModule(source);\n    }\n    // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n    // We can't have a string here, we would have thrown an error if !isWeb\n    // or returned Asset.fromModule if isWeb.\n    return source;\n}\nasync function _loadSingleFontAsync(name, asset) {\n    await asset.downloadAsync();\n    if (!asset.downloaded) {\n        throw new Error(`Failed to download asset for font \"${name}\"`);\n    }\n    await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\nfunction _getNativeFontName(name) {\n    if (fontFamilyNeedsScoping(name)) {\n        return `${Constants.sessionId}-${name}`;\n    }\n    else {\n        return name;\n    }\n}\nif (module && module.exports) {\n    let wasImportWarningShown = false;\n    // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n    Object.defineProperty(exports, 'Font', {\n        get() {\n            if (!wasImportWarningShown) {\n                console.warn(`The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`);\n                wasImportWarningShown = true;\n            }\n            return {\n                processFontFamily,\n                isLoaded,\n                isLoading,\n                loadAsync,\n            };\n        },\n    });\n}\n//# sourceMappingURL=Font.js.map"]},"metadata":{},"sourceType":"module"}