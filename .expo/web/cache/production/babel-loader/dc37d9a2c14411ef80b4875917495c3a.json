{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import React from\"react\";import Text from\"react-native-web/dist/exports/Text\";import*as Font from\"expo-font\";import createIconSet from\"./vendor/react-native-vector-icons/lib/create-icon-set\";import createIconButtonComponent from\"./vendor/react-native-vector-icons/lib/icon-button\";export{DEFAULT_ICON_COLOR,DEFAULT_ICON_SIZE}from\"./vendor/react-native-vector-icons/lib/create-icon-set\";export default function(glyphMap,fontName,expoAssetId,fontStyle){var _a;var font=_defineProperty({},fontName,expoAssetId);var RNVIconComponent=createIconSet(glyphMap,fontName,null,fontStyle);return _a=function(_React$Component){_inherits(Icon,_React$Component);function Icon(){var _this;_classCallCheck(this,Icon);_this=_possibleConstructorReturn(this,_getPrototypeOf(Icon).apply(this,arguments));_this._mounted=false;_this.state={fontIsLoaded:Font.isLoaded(fontName)};return _this;}_createClass(Icon,[{key:\"componentDidMount\",value:function componentDidMount(){return _regeneratorRuntime.async(function componentDidMount$(_context){while(1){switch(_context.prev=_context.next){case 0:this._mounted=true;if(this.state.fontIsLoaded){_context.next=5;break;}_context.next=4;return _regeneratorRuntime.awrap(Font.loadAsync(font));case 4:this._mounted&&this.setState({fontIsLoaded:true});case 5:case\"end\":return _context.stop();}}},null,this);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._mounted=false;}},{key:\"setNativeProps\",value:function setNativeProps(props){if(this._icon){this._icon.setNativeProps(props);}}},{key:\"render\",value:function render(){var _this2=this;if(!this.state.fontIsLoaded){return React.createElement(Text,null);}return React.createElement(RNVIconComponent,_extends({ref:function ref(view){_this2._icon=view;}},this.props));}}]);return Icon;}(React.Component),_a.propTypes=RNVIconComponent.propTypes,_a.defaultProps=RNVIconComponent.defaultProps,_a.Button=createIconButtonComponent(_a),_a.glyphMap=glyphMap,_a.getRawGlyphMap=function(){return glyphMap;},_a.getFontFamily=function(){return fontName;},_a.loadFont=function(){return Font.loadAsync(font);},_a.font=font,_a;}","map":{"version":3,"sources":["/home/rick/dev/cool-home/node_modules/@expo/vector-icons/build/createIconSet.js"],"names":["React","Font","createIconSet","createIconButtonComponent","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","_a","font","RNVIconComponent","arguments","_mounted","state","fontIsLoaded","isLoaded","loadAsync","setState","props","_icon","setNativeProps","view","Component","propTypes","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont"],"mappings":"ugBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,qDAEA,MAAO,GAAKC,CAAAA,IAAZ,KAAsB,WAAtB,CACA,MAAOC,CAAAA,aAAP,8DACA,MAAOC,CAAAA,yBAAP,0DACA,OAASC,kBAAT,CAA6BC,iBAA7B,8DACA,cAAe,UAAUC,QAAV,CAAoBC,QAApB,CAA8BC,WAA9B,CAA2CC,SAA3C,CAAsD,CACjE,GAAIC,CAAAA,EAAJ,CACA,GAAMC,CAAAA,IAAI,oBAAMJ,QAAN,CAAiBC,WAAjB,CAAV,CACA,GAAMI,CAAAA,gBAAgB,CAAGV,aAAa,CAACI,QAAD,CAAWC,QAAX,CAAqB,IAArB,CAA2BE,SAA3B,CAAtC,CACA,MAAOC,CAAAA,EAAE,6DACD,eAAc,sCACV,uEAASG,SAAT,GACA,MAAKC,QAAL,CAAgB,KAAhB,CACA,MAAKC,KAAL,CAAa,CACTC,YAAY,CAAEf,IAAI,CAACgB,QAAL,CAAcV,QAAd,CADL,CAAb,CAHU,aAMb,CAPA,0MASG,KAAKO,QAAL,CAAgB,IAAhB,CATH,GAUQ,KAAKC,KAAL,CAAWC,YAVnB,0EAWaf,IAAI,CAACiB,SAAL,CAAeP,IAAf,CAXb,SAYO,KAAKG,QAAL,EAAiB,KAAKK,QAAL,CAAc,CAAEH,YAAY,CAAE,IAAhB,CAAd,CAAjB,CAZP,2HAesB,CACnB,KAAKF,QAAL,CAAgB,KAAhB,CACH,CAjBA,sDAkBcM,KAlBd,CAkBqB,CAClB,GAAI,KAAKC,KAAT,CAAgB,CACZ,KAAKA,KAAL,CAAWC,cAAX,CAA0BF,KAA1B,EACH,CACJ,CAtBA,uCAuBQ,iBACL,GAAI,CAAC,KAAKL,KAAL,CAAWC,YAAhB,CAA8B,CAC1B,MAAO,qBAAC,IAAD,MAAP,CACH,CACD,MAAQ,qBAAC,gBAAD,WAAkB,GAAG,CAAE,aAAAO,IAAI,CAAI,CACnC,MAAI,CAACF,KAAL,CAAaE,IAAb,CACH,CAFO,EAED,KAAKH,KAFJ,EAAR,CAGH,CA9BA,kBAAsBpB,KAAK,CAACwB,SAA5B,CAAF,CAgCHd,EAAE,CAACe,SAAH,CAAeb,gBAAgB,CAACa,SAhC7B,CAiCHf,EAAE,CAACgB,YAAH,CAAkBd,gBAAgB,CAACc,YAjChC,CAkCHhB,EAAE,CAACiB,MAAH,CAAYxB,yBAAyB,CAACO,EAAD,CAlClC,CAmCHA,EAAE,CAACJ,QAAH,CAAcA,QAnCX,CAoCHI,EAAE,CAACkB,cAAH,CAAoB,iBAAMtB,CAAAA,QAAN,EApCjB,CAqCHI,EAAE,CAACmB,aAAH,CAAmB,iBAAMtB,CAAAA,QAAN,EArChB,CAsCHG,EAAE,CAACoB,QAAH,CAAc,iBAAM7B,CAAAA,IAAI,CAACiB,SAAL,CAAeP,IAAf,CAAN,EAtCX,CAuCHD,EAAE,CAACC,IAAH,CAAUA,IAvCP,CAwCHD,EAxCJ,CAyCH","sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport * as Font from \"expo-font\";\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n    var _a;\n    const font = { [fontName]: expoAssetId };\n    const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n    return _a = class Icon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this._mounted = false;\n                this.state = {\n                    fontIsLoaded: Font.isLoaded(fontName)\n                };\n            }\n            async componentDidMount() {\n                this._mounted = true;\n                if (!this.state.fontIsLoaded) {\n                    await Font.loadAsync(font);\n                    this._mounted && this.setState({ fontIsLoaded: true });\n                }\n            }\n            componentWillUnmount() {\n                this._mounted = false;\n            }\n            setNativeProps(props) {\n                if (this._icon) {\n                    this._icon.setNativeProps(props);\n                }\n            }\n            render() {\n                if (!this.state.fontIsLoaded) {\n                    return <Text />;\n                }\n                return (<RNVIconComponent ref={view => {\n                    this._icon = view;\n                }} {...this.props}/>);\n            }\n        },\n        _a.propTypes = RNVIconComponent.propTypes,\n        _a.defaultProps = RNVIconComponent.defaultProps,\n        _a.Button = createIconButtonComponent(_a),\n        _a.glyphMap = glyphMap,\n        _a.getRawGlyphMap = () => glyphMap,\n        _a.getFontFamily = () => fontName,\n        _a.loadFont = () => Font.loadAsync(font),\n        _a.font = font,\n        _a;\n}\n//# sourceMappingURL=createIconSet.js.map"]},"metadata":{},"sourceType":"module"}