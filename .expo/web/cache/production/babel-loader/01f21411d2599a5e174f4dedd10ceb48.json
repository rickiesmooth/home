{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import React from\"react\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import Switch from\"react-native-web/dist/exports/Switch\";import Slider from\"../../Elements/Slider/Slider.web\";import{valueToPercentage,percentageToValue}from\"../../../utils/percentages\";import{pipe}from\"ramda\";var ControlsSwitcher=function ControlsSwitcher(_ref){var updateThing=_ref.updateThing,property=_ref.property,values=_ref.values;var sharedProperties={disabled:!values.on,minimumValue:0,maximumValue:1};switch(property[\"@type\"]){case\"OnOffProperty\":return React.createElement(Switch,{value:values.on,onValueChange:function onValueChange(on){return updateThing({on:on});}});case\"BrightnessProperty\":var levelPercentage=valueToPercentage(values.level,property);var handleLevelChange=pipe(function(percentage){return percentageToValue(percentage,property);},function(value){return updateThing({level:value});});return React.createElement(View,null,React.createElement(Text,null,\"brightness level \"+levelPercentage),React.createElement(Slider,_extends({},sharedProperties,{value:levelPercentage,onValueChange:handleLevelChange})));case\"ColorTemperatureProperty\":var handleColorTemperatureChange=pipe(function(percentage){return percentageToValue(percentage,property);},function(value){return updateThing({colorTemperature:value});});var colorTemperaturePercentage=valueToPercentage(values.colorTemperature,property);return React.createElement(View,null,React.createElement(Text,null,\"colortemp level \"+colorTemperaturePercentage),React.createElement(Slider,_extends({},sharedProperties,{value:colorTemperaturePercentage,onValueChange:handleColorTemperatureChange})));default:return React.createElement(Text,null,\"Not implemented\");}};export var Controls=function Controls(_ref2){var properties=_ref2.properties,values=_ref2.values,updateThing=_ref2.updateThing,style=_ref2.style;return React.createElement(View,{style:style},Object.values(properties).map(function(val,i){return React.createElement(ControlsSwitcher,{key:i,updateThing:updateThing,property:val,values:values});}));};","map":{"version":3,"sources":["/home/rick/dev/cool-home/src/components/Features/Controls/Controls.tsx"],"names":["React","Slider","valueToPercentage","percentageToValue","pipe","ControlsSwitcher","updateThing","property","values","sharedProperties","disabled","on","minimumValue","maximumValue","levelPercentage","level","handleLevelChange","percentage","value","handleColorTemperatureChange","colorTemperature","colorTemperaturePercentage","Controls","properties","style","Object","map","val","i"],"mappings":"qDAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,mKAOA,MAAOC,CAAAA,MAAP,wCACA,OACEC,iBADF,CAEEC,iBAFF,kCAIA,OAASC,IAAT,KAAqB,OAArB,CAYA,GAAMC,CAAAA,gBAAuC,CAAG,QAA1CA,CAAAA,gBAA0C,MAI1C,IAHJC,CAAAA,WAGI,MAHJA,WAGI,CAFJC,QAEI,MAFJA,QAEI,CADJC,MACI,MADJA,MACI,CACJ,GAAMC,CAAAA,gBAAgB,CAAG,CACvBC,QAAQ,CAAE,CAACF,MAAM,CAACG,EADK,CAEvBC,YAAY,CAAE,CAFS,CAGvBC,YAAY,CAAE,CAHS,CAAzB,CAKA,OAAQN,QAAQ,CAAE,OAAF,CAAhB,EACE,IAAK,eAAL,CACE,MACE,qBAAC,MAAD,EAAQ,KAAK,CAAEC,MAAM,CAACG,EAAtB,CAA0B,aAAa,CAAE,uBAAAA,EAAE,QAAIL,CAAAA,WAAW,CAAC,CAAEK,EAAE,CAAFA,EAAF,CAAD,CAAf,EAA3C,EADF,CAGF,IAAK,oBAAL,CACE,GAAMG,CAAAA,eAAe,CAAGZ,iBAAiB,CAACM,MAAM,CAACO,KAAR,CAAeR,QAAf,CAAzC,CACA,GAAMS,CAAAA,iBAAiB,CAAGZ,IAAI,CAC5B,SAACa,UAAD,QAAwBd,CAAAA,iBAAiB,CAACc,UAAD,CAAaV,QAAb,CAAzC,EAD4B,CAE5B,SAACW,KAAD,QAAmBZ,CAAAA,WAAW,CAAC,CAAES,KAAK,CAAEG,KAAT,CAAD,CAA9B,EAF4B,CAA9B,CAIA,MACE,qBAAC,IAAD,MACE,oBAAC,IAAD,0BAA2BJ,eAA3B,CADF,CAEE,oBAAC,MAAD,aACML,gBADN,EAEE,KAAK,CAAEK,eAFT,CAGE,aAAa,CAAEE,iBAHjB,GAFF,CADF,CAUF,IAAK,0BAAL,CACE,GAAMG,CAAAA,4BAA4B,CAAGf,IAAI,CACvC,SAACa,UAAD,QAAwBd,CAAAA,iBAAiB,CAACc,UAAD,CAAaV,QAAb,CAAzC,EADuC,CAEvC,SAACW,KAAD,QAAmBZ,CAAAA,WAAW,CAAC,CAAEc,gBAAgB,CAAEF,KAApB,CAAD,CAA9B,EAFuC,CAAzC,CAKA,GAAMG,CAAAA,0BAA0B,CAAGnB,iBAAiB,CAClDM,MAAM,CAACY,gBAD2C,CAElDb,QAFkD,CAApD,CAIA,MACE,qBAAC,IAAD,MACE,oBAAC,IAAD,yBAA0Bc,0BAA1B,CADF,CAEE,oBAAC,MAAD,aACMZ,gBADN,EAEE,KAAK,CAAEY,0BAFT,CAGE,aAAa,CAAEF,4BAHjB,GAFF,CADF,CAUF,QACE,MAAO,qBAAC,IAAD,wBAAP,CA1CJ,CA4CD,CAtDD,CAwDA,MAAO,IAAMG,CAAAA,QAAyB,CAAG,QAA5BA,CAAAA,QAA4B,WACvCC,CAAAA,UADuC,OACvCA,UADuC,CAEvCf,MAFuC,OAEvCA,MAFuC,CAGvCF,WAHuC,OAGvCA,WAHuC,CAIvCkB,KAJuC,OAIvCA,KAJuC,OAMvC,qBAAC,IAAD,EAAM,KAAK,CAAEA,KAAb,EACGC,MAAM,CAACjB,MAAP,CAAce,UAAd,EAA0BG,GAA1B,CAA8B,SAACC,GAAD,CAAMC,CAAN,QAC7B,qBAAC,gBAAD,EACE,GAAG,CAAEA,CADP,CAEE,WAAW,CAAEtB,WAFf,CAGE,QAAQ,CAAEqB,GAHZ,CAIE,MAAM,CAAEnB,MAJV,EAD6B,EAA9B,CADH,CANuC,EAAlC","sourcesContent":["import React from \"react\";\nimport {\n  ThingModelProperties,\n  ThingModelValues,\n  ThingPropertyNormalized\n} from \"../../../store/things/interfaces\";\nimport { View, Text, Switch, ViewProps } from \"react-native\";\nimport Slider from \"../../Elements/Slider/Slider.web\";\nimport {\n  valueToPercentage,\n  percentageToValue\n} from \"../../../utils/percentages\";\nimport { pipe } from \"ramda\";\n\nexport interface Props extends ViewProps {\n  properties: Partial<ThingModelProperties>;\n  values: Partial<ThingModelValues>;\n  updateThing: (val: Partial<ThingModelValues>) => void;\n}\n\ntype SwitchProps = Omit<Props, \"properties\"> & {\n  property: ThingPropertyNormalized;\n};\n\nconst ControlsSwitcher: React.FC<SwitchProps> = ({\n  updateThing,\n  property,\n  values\n}) => {\n  const sharedProperties = {\n    disabled: !values.on,\n    minimumValue: 0,\n    maximumValue: 1\n  };\n  switch (property![\"@type\"]) {\n    case \"OnOffProperty\":\n      return (\n        <Switch value={values.on} onValueChange={on => updateThing({ on })} />\n      );\n    case \"BrightnessProperty\":\n      const levelPercentage = valueToPercentage(values.level, property);\n      const handleLevelChange = pipe(\n        (percentage: number) => percentageToValue(percentage, property),\n        (value: number) => updateThing({ level: value })\n      );\n      return (\n        <View>\n          <Text>{`brightness level ${levelPercentage}`}</Text>\n          <Slider\n            {...sharedProperties}\n            value={levelPercentage}\n            onValueChange={handleLevelChange}\n          />\n        </View>\n      );\n    case \"ColorTemperatureProperty\":\n      const handleColorTemperatureChange = pipe(\n        (percentage: number) => percentageToValue(percentage, property),\n        (value: number) => updateThing({ colorTemperature: value })\n      );\n\n      const colorTemperaturePercentage = valueToPercentage(\n        values.colorTemperature,\n        property\n      );\n      return (\n        <View>\n          <Text>{`colortemp level ${colorTemperaturePercentage}`}</Text>\n          <Slider\n            {...sharedProperties}\n            value={colorTemperaturePercentage}\n            onValueChange={handleColorTemperatureChange}\n          />\n        </View>\n      );\n    default:\n      return <Text>Not implemented</Text>;\n  }\n};\n\nexport const Controls: React.FC<Props> = ({\n  properties,\n  values,\n  updateThing,\n  style\n}) => (\n  <View style={style}>\n    {Object.values(properties).map((val, i) => (\n      <ControlsSwitcher\n        key={i}\n        updateThing={updateThing}\n        property={val!}\n        values={values}\n      />\n    ))}\n  </View>\n);\n"]},"metadata":{},"sourceType":"module"}