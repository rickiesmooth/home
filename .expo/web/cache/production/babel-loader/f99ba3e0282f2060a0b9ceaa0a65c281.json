{"ast":null,"code":"'use strict';function assertPath(path){if(typeof path!=='string'){throw new TypeError('Path must be a string. Received '+JSON.stringify(path));}}function normalizeStringPosix(path,allowAboveRoot){var res='';var lastSegmentLength=0;var lastSlash=-1;var dots=0;var code;for(var i=0;i<=path.length;++i){if(i<path.length)code=path.charCodeAt(i);else if(code===47)break;else code=47;if(code===47){if(lastSlash===i-1||dots===1){}else if(lastSlash!==i-1&&dots===2){if(res.length<2||lastSegmentLength!==2||res.charCodeAt(res.length-1)!==46||res.charCodeAt(res.length-2)!==46){if(res.length>2){var lastSlashIndex=res.lastIndexOf('/');if(lastSlashIndex!==res.length-1){if(lastSlashIndex===-1){res='';lastSegmentLength=0;}else{res=res.slice(0,lastSlashIndex);lastSegmentLength=res.length-1-res.lastIndexOf('/');}lastSlash=i;dots=0;continue;}}else if(res.length===2||res.length===1){res='';lastSegmentLength=0;lastSlash=i;dots=0;continue;}}if(allowAboveRoot){if(res.length>0)res+='/..';else res='..';lastSegmentLength=2;}}else{if(res.length>0)res+='/'+path.slice(lastSlash+1,i);else res=path.slice(lastSlash+1,i);lastSegmentLength=i-lastSlash-1;}lastSlash=i;dots=0;}else if(code===46&&dots!==-1){++dots;}else{dots=-1;}}return res;}function _format(sep,pathObject){var dir=pathObject.dir||pathObject.root;var base=pathObject.base||(pathObject.name||'')+(pathObject.ext||'');if(!dir){return base;}if(dir===pathObject.root){return dir+base;}return dir+sep+base;}var posix={resolve:function resolve(){var resolvedPath='';var resolvedAbsolute=false;var cwd;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path;if(i>=0)path=arguments[i];else{if(cwd===undefined)cwd=process.cwd();path=cwd;}assertPath(path);if(path.length===0){continue;}resolvedPath=path+'/'+resolvedPath;resolvedAbsolute=path.charCodeAt(0)===47;}resolvedPath=normalizeStringPosix(resolvedPath,!resolvedAbsolute);if(resolvedAbsolute){if(resolvedPath.length>0)return'/'+resolvedPath;else return'/';}else if(resolvedPath.length>0){return resolvedPath;}else{return'.';}},normalize:function normalize(path){assertPath(path);if(path.length===0)return'.';var isAbsolute=path.charCodeAt(0)===47;var trailingSeparator=path.charCodeAt(path.length-1)===47;path=normalizeStringPosix(path,!isAbsolute);if(path.length===0&&!isAbsolute)path='.';if(path.length>0&&trailingSeparator)path+='/';if(isAbsolute)return'/'+path;return path;},isAbsolute:function isAbsolute(path){assertPath(path);return path.length>0&&path.charCodeAt(0)===47;},join:function join(){if(arguments.length===0)return'.';var joined;for(var i=0;i<arguments.length;++i){var arg=arguments[i];assertPath(arg);if(arg.length>0){if(joined===undefined)joined=arg;else joined+='/'+arg;}}if(joined===undefined)return'.';return posix.normalize(joined);},relative:function relative(from,to){assertPath(from);assertPath(to);if(from===to)return'';from=posix.resolve(from);to=posix.resolve(to);if(from===to)return'';var fromStart=1;for(;fromStart<from.length;++fromStart){if(from.charCodeAt(fromStart)!==47)break;}var fromEnd=from.length;var fromLen=fromEnd-fromStart;var toStart=1;for(;toStart<to.length;++toStart){if(to.charCodeAt(toStart)!==47)break;}var toEnd=to.length;var toLen=toEnd-toStart;var length=fromLen<toLen?fromLen:toLen;var lastCommonSep=-1;var i=0;for(;i<=length;++i){if(i===length){if(toLen>length){if(to.charCodeAt(toStart+i)===47){return to.slice(toStart+i+1);}else if(i===0){return to.slice(toStart+i);}}else if(fromLen>length){if(from.charCodeAt(fromStart+i)===47){lastCommonSep=i;}else if(i===0){lastCommonSep=0;}}break;}var fromCode=from.charCodeAt(fromStart+i);var toCode=to.charCodeAt(toStart+i);if(fromCode!==toCode)break;else if(fromCode===47)lastCommonSep=i;}var out='';for(i=fromStart+lastCommonSep+1;i<=fromEnd;++i){if(i===fromEnd||from.charCodeAt(i)===47){if(out.length===0)out+='..';else out+='/..';}}if(out.length>0)return out+to.slice(toStart+lastCommonSep);else{toStart+=lastCommonSep;if(to.charCodeAt(toStart)===47)++toStart;return to.slice(toStart);}},_makeLong:function _makeLong(path){return path;},dirname:function dirname(path){assertPath(path);if(path.length===0)return'.';var code=path.charCodeAt(0);var hasRoot=code===47;var end=-1;var matchedSlash=true;for(var i=path.length-1;i>=1;--i){code=path.charCodeAt(i);if(code===47){if(!matchedSlash){end=i;break;}}else{matchedSlash=false;}}if(end===-1)return hasRoot?'/':'.';if(hasRoot&&end===1)return'//';return path.slice(0,end);},basename:function basename(path,ext){if(ext!==undefined&&typeof ext!=='string')throw new TypeError('\"ext\" argument must be a string');assertPath(path);var start=0;var end=-1;var matchedSlash=true;var i;if(ext!==undefined&&ext.length>0&&ext.length<=path.length){if(ext.length===path.length&&ext===path)return'';var extIdx=ext.length-1;var firstNonSlashEnd=-1;for(i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){start=i+1;break;}}else{if(firstNonSlashEnd===-1){matchedSlash=false;firstNonSlashEnd=i+1;}if(extIdx>=0){if(code===ext.charCodeAt(extIdx)){if(--extIdx===-1){end=i;}}else{extIdx=-1;end=firstNonSlashEnd;}}}}if(start===end)end=firstNonSlashEnd;else if(end===-1)end=path.length;return path.slice(start,end);}else{for(i=path.length-1;i>=0;--i){if(path.charCodeAt(i)===47){if(!matchedSlash){start=i+1;break;}}else if(end===-1){matchedSlash=false;end=i+1;}}if(end===-1)return'';return path.slice(start,end);}},extname:function extname(path){assertPath(path);var startDot=-1;var startPart=0;var end=-1;var matchedSlash=true;var preDotState=0;for(var i=path.length-1;i>=0;--i){var code=path.charCodeAt(i);if(code===47){if(!matchedSlash){startPart=i+1;break;}continue;}if(end===-1){matchedSlash=false;end=i+1;}if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1;}else if(startDot!==-1){preDotState=-1;}}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1){return'';}return path.slice(startDot,end);},format:function format(pathObject){if(pathObject===null||typeof pathObject!=='object'){throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof pathObject);}return _format('/',pathObject);},parse:function parse(path){assertPath(path);var ret={root:'',dir:'',base:'',ext:'',name:''};if(path.length===0)return ret;var code=path.charCodeAt(0);var isAbsolute=code===47;var start;if(isAbsolute){ret.root='/';start=1;}else{start=0;}var startDot=-1;var startPart=0;var end=-1;var matchedSlash=true;var i=path.length-1;var preDotState=0;for(;i>=start;--i){code=path.charCodeAt(i);if(code===47){if(!matchedSlash){startPart=i+1;break;}continue;}if(end===-1){matchedSlash=false;end=i+1;}if(code===46){if(startDot===-1)startDot=i;else if(preDotState!==1)preDotState=1;}else if(startDot!==-1){preDotState=-1;}}if(startDot===-1||end===-1||preDotState===0||preDotState===1&&startDot===end-1&&startDot===startPart+1){if(end!==-1){if(startPart===0&&isAbsolute)ret.base=ret.name=path.slice(1,end);else ret.base=ret.name=path.slice(startPart,end);}}else{if(startPart===0&&isAbsolute){ret.name=path.slice(1,startDot);ret.base=path.slice(1,end);}else{ret.name=path.slice(startPart,startDot);ret.base=path.slice(startPart,end);}ret.ext=path.slice(startDot,end);}if(startPart>0)ret.dir=path.slice(0,startPart-1);else if(isAbsolute)ret.dir='/';return ret;},sep:'/',delimiter:':',win32:null,posix:null};posix.posix=posix;module.exports=posix;","map":{"version":3,"sources":["/home/rick/dev/cool-home/node_modules/expo-asset/node_modules/path-browserify/index.js"],"names":["assertPath","path","TypeError","JSON","stringify","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","_format","sep","pathObject","dir","root","base","name","ext","posix","resolve","resolvedPath","resolvedAbsolute","cwd","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","toCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","parse","ret","delimiter","win32","module","exports"],"mappings":"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","sourcesContent":["// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n"]},"metadata":{},"sourceType":"script"}