{"ast":null,"code":"import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{getAssetByID}from\"./AssetRegistry\";import AssetSourceResolver from\"./AssetSourceResolver\";var _customSourceTransformer;var _serverURL;var _scriptURL;var _sourceCodeScriptURL;function getSourceCodeScriptURL(){if(_sourceCodeScriptURL){return _sourceCodeScriptURL;}var sourceCode=nativeExtensions&&nativeExtensions.SourceCode;if(!sourceCode){sourceCode=NativeModules&&NativeModules.SourceCode;}_sourceCodeScriptURL=sourceCode.scriptURL;return _sourceCodeScriptURL;}function getDevServerURL(){if(_serverURL===undefined){var sourceCodeScriptURL=getSourceCodeScriptURL();var match=sourceCodeScriptURL&&sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);if(match){_serverURL=match[0];}else{_serverURL=null;}}return _serverURL;}function _coerceLocalScriptURL(scriptURL){if(scriptURL){if(scriptURL.startsWith('assets://')){return null;}scriptURL=scriptURL.substring(0,scriptURL.lastIndexOf('/')+1);if(!scriptURL.includes('://')){scriptURL='file://'+scriptURL;}}return null;}function getScriptURL(){if(_scriptURL===undefined){_scriptURL=_coerceLocalScriptURL(getSourceCodeScriptURL());}return _scriptURL;}export function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}export default function resolveAssetSource(source){if(typeof source==='object'){return source;}var asset=getAssetByID(source);if(!asset){return undefined;}var resolver=new AssetSourceResolver(getDevServerURL(),getScriptURL(),asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}Object.defineProperty(resolveAssetSource,'setCustomSourceTransformer',{get:function get(){return setCustomSourceTransformer;}});var pickScale=AssetSourceResolver.pickScale;export{pickScale};","map":{"version":3,"sources":["/home/rick/dev/cool-home/node_modules/expo-asset/build/resolveAssetSource.web.js"],"names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","nativeExtensions","SourceCode","NativeModules","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"mappings":"uEACA,OAASA,YAAT,uBACA,MAAOC,CAAAA,mBAAP,6BACA,GAAIC,CAAAA,wBAAJ,CACA,GAAIC,CAAAA,UAAJ,CACA,GAAIC,CAAAA,UAAJ,CACA,GAAIC,CAAAA,oBAAJ,CACA,QAASC,CAAAA,sBAAT,EAAkC,CAC9B,GAAID,oBAAJ,CAA0B,CACtB,MAAOA,CAAAA,oBAAP,CACH,CACD,GAAIE,CAAAA,UAAU,CAAGC,gBAAgB,EAAIA,gBAAgB,CAACC,UAAtD,CACA,GAAI,CAACF,UAAL,CAAiB,CACbA,UAAU,CAAGG,aAAa,EAAIA,aAAa,CAACD,UAA5C,CACH,CACDJ,oBAAoB,CAAGE,UAAU,CAACI,SAAlC,CACA,MAAON,CAAAA,oBAAP,CACH,CACD,QAASO,CAAAA,eAAT,EAA2B,CACvB,GAAIT,UAAU,GAAKU,SAAnB,CAA8B,CAC1B,GAAMC,CAAAA,mBAAmB,CAAGR,sBAAsB,EAAlD,CACA,GAAMS,CAAAA,KAAK,CAAGD,mBAAmB,EAAIA,mBAAmB,CAACC,KAApB,CAA0B,mBAA1B,CAArC,CACA,GAAIA,KAAJ,CAAW,CAEPZ,UAAU,CAAGY,KAAK,CAAC,CAAD,CAAlB,CACH,CAHD,IAIK,CAEDZ,UAAU,CAAG,IAAb,CACH,CACJ,CACD,MAAOA,CAAAA,UAAP,CACH,CACD,QAASa,CAAAA,qBAAT,CAA+BL,SAA/B,CAA0C,CACtC,GAAIA,SAAJ,CAAe,CACX,GAAIA,SAAS,CAACM,UAAV,CAAqB,WAArB,CAAJ,CAAuC,CAEnC,MAAO,KAAP,CACH,CACDN,SAAS,CAAGA,SAAS,CAACO,SAAV,CAAoB,CAApB,CAAuBP,SAAS,CAACQ,WAAV,CAAsB,GAAtB,EAA6B,CAApD,CAAZ,CACA,GAAI,CAACR,SAAS,CAACS,QAAV,CAAmB,KAAnB,CAAL,CAAgC,CAG5BT,SAAS,CAAG,UAAYA,SAAxB,CACH,CACJ,CACD,MAAO,KAAP,CACH,CACD,QAASU,CAAAA,YAAT,EAAwB,CACpB,GAAIjB,UAAU,GAAKS,SAAnB,CAA8B,CAC1BT,UAAU,CAAGY,qBAAqB,CAACV,sBAAsB,EAAvB,CAAlC,CACH,CACD,MAAOF,CAAAA,UAAP,CACH,CACD,MAAO,SAASkB,CAAAA,0BAAT,CAAoCC,WAApC,CAAiD,CACpDrB,wBAAwB,CAAGqB,WAA3B,CACH,CAKD,cAAe,SAASC,CAAAA,kBAAT,CAA4BC,MAA5B,CAAoC,CAC/C,GAAI,MAAOA,CAAAA,MAAP,GAAkB,QAAtB,CAAgC,CAC5B,MAAOA,CAAAA,MAAP,CACH,CACD,GAAMC,CAAAA,KAAK,CAAG1B,YAAY,CAACyB,MAAD,CAA1B,CACA,GAAI,CAACC,KAAL,CAAY,CACR,MAAOb,CAAAA,SAAP,CACH,CACD,GAAMc,CAAAA,QAAQ,CAAG,GAAI1B,CAAAA,mBAAJ,CAAwBW,eAAe,EAAvC,CAA2CS,YAAY,EAAvD,CAA2DK,KAA3D,CAAjB,CACA,GAAIxB,wBAAJ,CAA8B,CAC1B,MAAOA,CAAAA,wBAAwB,CAACyB,QAAD,CAA/B,CACH,CACD,MAAOA,CAAAA,QAAQ,CAACC,YAAT,EAAP,CACH,CACDC,MAAM,CAACC,cAAP,CAAsBN,kBAAtB,CAA0C,4BAA1C,CAAwE,CACpEO,GADoE,eAC9D,CACF,MAAOT,CAAAA,0BAAP,CACH,CAHmE,CAAxE,E,GAKeU,CAAAA,S,CAAc/B,mB,CAAd+B,S","sourcesContent":["import { NativeModules } from 'react-native';\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver from './AssetSourceResolver';\nlet _customSourceTransformer;\nlet _serverURL;\nlet _scriptURL;\nlet _sourceCodeScriptURL;\nfunction getSourceCodeScriptURL() {\n    if (_sourceCodeScriptURL) {\n        return _sourceCodeScriptURL;\n    }\n    let sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n    if (!sourceCode) {\n        sourceCode = NativeModules && NativeModules.SourceCode;\n    }\n    _sourceCodeScriptURL = sourceCode.scriptURL;\n    return _sourceCodeScriptURL;\n}\nfunction getDevServerURL() {\n    if (_serverURL === undefined) {\n        const sourceCodeScriptURL = getSourceCodeScriptURL();\n        const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n        if (match) {\n            // jsBundle was loaded from network\n            _serverURL = match[0];\n        }\n        else {\n            // jsBundle was loaded from file\n            _serverURL = null;\n        }\n    }\n    return _serverURL;\n}\nfunction _coerceLocalScriptURL(scriptURL) {\n    if (scriptURL) {\n        if (scriptURL.startsWith('assets://')) {\n            // android: running from within assets, no offline path to use\n            return null;\n        }\n        scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n        if (!scriptURL.includes('://')) {\n            // Add file protocol in case we have an absolute file path and not a URL.\n            // This shouldn't really be necessary. scriptURL should be a URL.\n            scriptURL = 'file://' + scriptURL;\n        }\n    }\n    return null;\n}\nfunction getScriptURL() {\n    if (_scriptURL === undefined) {\n        _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n    }\n    return _scriptURL;\n}\nexport function setCustomSourceTransformer(transformer) {\n    _customSourceTransformer = transformer;\n}\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source) {\n    if (typeof source === 'object') {\n        return source;\n    }\n    const asset = getAssetByID(source);\n    if (!asset) {\n        return undefined;\n    }\n    const resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n    if (_customSourceTransformer) {\n        return _customSourceTransformer(resolver);\n    }\n    return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n    get() {\n        return setCustomSourceTransformer;\n    },\n});\nexport const { pickScale } = AssetSourceResolver;\n//# sourceMappingURL=resolveAssetSource.web.js.map"]},"metadata":{},"sourceType":"module"}