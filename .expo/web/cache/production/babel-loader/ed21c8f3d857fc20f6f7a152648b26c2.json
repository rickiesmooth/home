{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _taggedTemplateLiteralLoose from\"@babel/runtime/helpers/taggedTemplateLiteralLoose\";function _templateObject(){var data=_taggedTemplateLiteralLoose([\"\\n  \",\"\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import React from\"react\";import Text from\"react-native-web/dist/exports/Text\";import ActivityIndicator from\"react-native-web/dist/exports/ActivityIndicator\";import{useMutation}from\"@apollo/react-hooks\";import gql from\"graphql-tag\";import{pipe,indexBy,prop}from\"ramda\";import{deleteGroup}from\"../../../graphql/mutations\";import{group}from\"../../../utils/group\";import{Controls}from\"../Controls/Controls\";import{Card}from\"../../Elements/Card/Card\";var DELETE_GROUP=gql(_templateObject(),deleteGroup);export var Group=function Group(_ref){var loading=_ref.loading,_ref$devices=_ref.devices,devices=_ref$devices===void 0?[]:_ref$devices,things=_ref.things,name=_ref.name,id=_ref.id;var _useMutation=useMutation(DELETE_GROUP,{variables:{input:{id:id}},refetchQueries:[\"GetUser\"]}),_useMutation2=_slicedToArray(_useMutation,1),deleteGroup=_useMutation2[0];var groupThings=React.useMemo(function(){if(things.length&&devices.length){return pipe(function(){return indexBy(prop(\"id\"),things);},function(obj){return devices.map(function(id){return obj[id];});})();}},[things,devices]);var update=function update(val){return groupThings.forEach(function(_ref2){var updateThing=_ref2.updateThing;return updateThing(val);});};if(!loading&&(devices.length===0||things.length===0)){return React.createElement(Text,null,\"no devices\");}return React.createElement(Card,{title:name,onDelete:deleteGroup,subTitle:groupThings&&groupThings.map(function(_ref3){var title=_ref3.title;return title;}).join(\", \")},!loading&&groupThings?React.createElement(Controls,{values:group(groupThings,\"values\"),updateThing:update,properties:group(groupThings,\"properties\")}):React.createElement(ActivityIndicator,{\"data-testid\":\"loader\"}));};","map":{"version":3,"sources":["/home/rick/dev/cool-home/src/components/Features/Group/Group.tsx"],"names":["React","useMutation","gql","pipe","indexBy","prop","deleteGroup","group","Controls","Card","DELETE_GROUP","Group","loading","devices","things","name","id","variables","input","refetchQueries","groupThings","useMemo","length","obj","map","update","val","forEach","updateThing","title","join"],"mappings":"iTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,oIAEA,OAASC,WAAT,KAA4B,qBAA5B,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,OAASC,IAAT,CAAeC,OAAf,CAAwBC,IAAxB,KAAoC,OAApC,CAGA,OAASC,WAAT,kCACA,OAASC,KAAT,4BAEA,OAASC,QAAT,4BACA,OAASC,IAAT,gCAEA,GAAMC,CAAAA,YAAY,CAAGR,GAAH,mBACdI,WADc,CAAlB,CAYA,MAAO,IAAMK,CAAAA,KAAsB,CAAG,QAAzBA,CAAAA,KAAyB,MAMhC,IALJC,CAAAA,OAKI,MALJA,OAKI,mBAJJC,OAII,CAJJA,OAII,uBAJM,EAIN,cAHJC,MAGI,MAHJA,MAGI,CAFJC,IAEI,MAFJA,IAEI,CADJC,EACI,MADJA,EACI,kBACkBf,WAAW,CAC/BS,YAD+B,CAE/B,CACEO,SAAS,CAAE,CAAEC,KAAK,CAAE,CAAEF,EAAE,CAAFA,EAAF,CAAT,CADb,CAEEG,cAAc,CAAE,CAAC,SAAD,CAFlB,CAF+B,CAD7B,8CACGb,WADH,kBASJ,GAAMc,CAAAA,WAAW,CAAGpB,KAAK,CAACqB,OAAN,CAAc,UAAM,CACtC,GAAIP,MAAM,CAACQ,MAAP,EAAiBT,OAAO,CAACS,MAA7B,CAAqC,CACnC,MAAOnB,CAAAA,IAAI,CACT,iBAAMC,CAAAA,OAAO,CAACC,IAAI,CAAC,IAAD,CAAL,CAAaS,MAAb,CAAb,EADS,CAET,SAAAS,GAAG,QAAIV,CAAAA,OAAO,CAACW,GAAR,CAAY,SAAAR,EAAE,QAAIO,CAAAA,GAAG,CAACP,EAAD,CAAP,EAAd,CAAJ,EAFM,CAAJ,EAAP,CAID,CACF,CAPmB,CAOjB,CAACF,MAAD,CAASD,OAAT,CAPiB,CAApB,CASA,GAAMY,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,GAAD,QACbN,CAAAA,WAAW,CAAEO,OAAb,CAAqB,mBAAGC,CAAAA,WAAH,OAAGA,WAAH,OAAqBA,CAAAA,WAAW,CAACF,GAAD,CAAhC,EAArB,CADa,EAAf,CAGA,GAAI,CAACd,OAAD,GAAaC,OAAO,CAACS,MAAR,GAAmB,CAAnB,EAAwBR,MAAM,CAACQ,MAAP,GAAkB,CAAvD,CAAJ,CAA+D,CAC7D,MAAO,qBAAC,IAAD,mBAAP,CACD,CAED,MACE,qBAAC,IAAD,EACE,KAAK,CAAEP,IADT,CAEE,QAAQ,CAAET,WAFZ,CAGE,QAAQ,CAAEc,WAAW,EAAIA,WAAW,CAACI,GAAZ,CAAgB,mBAAGK,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAf,EAAhB,EAAsCC,IAAtC,CAA2C,IAA3C,CAH3B,EAKG,CAAClB,OAAD,EAAYQ,WAAZ,CACC,oBAAC,QAAD,EACE,MAAM,CAAEb,KAAK,CAAuBa,WAAvB,CAAoC,QAApC,CADf,CAEE,WAAW,CAAEK,MAFf,CAGE,UAAU,CAAElB,KAAK,CACfa,WADe,CAEf,YAFe,CAHnB,EADD,CAUC,oBAAC,iBAAD,EAAmB,cAAY,QAA/B,EAfJ,CADF,CAoBD,CAnDM","sourcesContent":["import React from \"react\";\nimport { Text, ActivityIndicator } from \"react-native\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { pipe, indexBy, prop } from \"ramda\";\nimport { ThingsContext } from \"../../../store/things\";\nimport { DeleteGroupMutationVariables } from \"../../../graphql/API\";\nimport { deleteGroup } from \"../../../graphql/mutations\";\nimport { group } from \"../../../utils/group\";\nimport { ThingModelValues, ThingModel } from \"../../../store/things/interfaces\";\nimport { Controls } from \"../Controls/Controls\";\nimport { Card } from \"../../Elements/Card/Card\";\n\nconst DELETE_GROUP = gql`\n  ${deleteGroup}\n`;\n\nexport type Props = {\n  devices?: string[];\n  things: ThingModel[];\n  loading: boolean;\n  name: string;\n  id: string;\n};\n\nexport const Group: React.FC<Props> = ({\n  loading,\n  devices = [],\n  things,\n  name,\n  id\n}) => {\n  const [deleteGroup] = useMutation<DeleteGroupMutationVariables>(\n    DELETE_GROUP,\n    {\n      variables: { input: { id } },\n      refetchQueries: [\"GetUser\"]\n    }\n  );\n\n  const groupThings = React.useMemo(() => {\n    if (things.length && devices.length) {\n      return pipe(\n        () => indexBy(prop(\"id\"), things),\n        obj => devices.map(id => obj[id])\n      )();\n    }\n  }, [things, devices]);\n\n  const update = (val: Partial<ThingModelValues>) =>\n    groupThings!.forEach(({ updateThing }) => updateThing(val));\n\n  if (!loading && (devices.length === 0 || things.length === 0)) {\n    return <Text>no devices</Text>;\n  }\n\n  return (\n    <Card\n      title={name}\n      onDelete={deleteGroup}\n      subTitle={groupThings && groupThings.map(({ title }) => title).join(\", \")}\n    >\n      {!loading && groupThings ? (\n        <Controls\n          values={group<ThingModel, \"values\">(groupThings, \"values\")}\n          updateThing={update}\n          properties={group<ThingModel, \"properties\">(\n            groupThings,\n            \"properties\"\n          )}\n        />\n      ) : (\n        <ActivityIndicator data-testid=\"loader\" />\n      )}\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}